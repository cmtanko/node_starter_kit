{"version":3,"sources":["../../src/city/city.controller.js"],"names":["router","get","req","res","country","undefined","getCityList","then","json","data","catch","err","getCity","params","id","delete","deleteCity","post","body","addCity","put"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,SAAS,sBAAf;;AAEA;;;;;;;;;;;;;;;AAeAA,OAAOC,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B,MAAIC,UAAU,iBAAEH,GAAF,CAAMC,GAAN,EAAW,eAAX,KAA+BG,SAA7C;AACA,iBACGC,WADH,CACeF,OADf,EAEGG,IAFH,CAEQ;AAAA,WAAQJ,IAAIK,IAAJ,CAASC,IAAT,CAAR;AAAA,GAFR,EAGGC,KAHH,CAGS;AAAA,WAAOP,IAAIK,IAAJ,CAASG,GAAT,CAAP;AAAA,GAHT;AAID,CAND;;AAQA;;;;;;;;;;;;;;;AAeAX,OAAOC,GAAP,CAAW,MAAX,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,iBACGS,OADH,CACWV,IAAIW,MAAJ,CAAWC,EADtB,EAEGP,IAFH,CAEQ;AAAA,WAAQJ,IAAIK,IAAJ,CAASC,IAAT,CAAR;AAAA,GAFR,EAGGC,KAHH,CAGS;AAAA,WAAOP,IAAIK,IAAJ,CAASG,GAAT,CAAP;AAAA,GAHT;AAID,CALD;;AAOA;;;;;;;;;;;;;;;AAeAX,OAAOe,MAAP,CAAc,MAAd,EAAsB,UAACb,GAAD,EAAMC,GAAN,EAAc;AAClC,iBACGa,UADH,CACcd,IAAIW,MAAJ,CAAWC,EADzB,EAEGP,IAFH,CAEQ;AAAA,WAAQJ,IAAIK,IAAJ,CAASC,IAAT,CAAR;AAAA,GAFR,EAGGC,KAHH,CAGS;AAAA,WAAOP,IAAIK,IAAJ,CAASG,GAAT,CAAP;AAAA,GAHT;AAID,CALD;;AAOA;;;;;;;;;;;;;;;;;;;;;AAqBAX,OAAOiB,IAAP,CAAY,GAAZ,EAAiB,UAACf,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAIC,UAAUF,IAAIgB,IAAlB;AACA,iBACGC,OADH,CACWf,OADX,EAEGG,IAFH,CAEQ;AAAA,WAAQJ,IAAIK,IAAJ,CAASC,IAAT,CAAR;AAAA,GAFR,EAGGC,KAHH,CAGS;AAAA,WAAOP,IAAIK,IAAJ,CAASG,GAAT,CAAP;AAAA,GAHT;AAID,CAND;;AAQA;;;;;;;;;;;;;;;;;;;;;AAqBAX,OAAOoB,GAAP,CAAW,GAAX,EAAgB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC5B,MAAIC,UAAUF,IAAIgB,IAAlB;AACA,iBACGC,OADH,CACWf,OADX,EAEGG,IAFH,CAEQ;AAAA,WAAQJ,IAAIK,IAAJ,CAASC,IAAT,CAAR;AAAA,GAFR,EAGGC,KAHH,CAGS;AAAA,WAAOP,IAAIK,IAAJ,CAASG,GAAT,CAAP;AAAA,GAHT;AAID,CAND;kBAOeX,M","file":"city.controller.js","sourcesContent":["import cityService from './city.service';\nimport { Router } from 'express';\nimport _ from 'lodash';\n\nconst router = Router();\n\n/**\n * @swagger\n * /cities:\n *   get:\n *     summary: List all cities\n *     tags:\n *       - Cities\n *     parameters:\n *       - name: country\n *         description: 'get by country'\n *         in: query\n *         type: string\n *         required: false\n */\n\nrouter.get('/', (req, res) => {\n  let country = _.get(req, 'query.country') || undefined;\n  cityService\n    .getCityList(country)\n    .then(data => res.json(data))\n    .catch(err => res.json(err));\n});\n\n/**\n * \n * @swagger\n * /cities/{city_id}:\n *   get:\n *     summary: Get city by city_id\n *     tags:\n *       - Cities\n *     parameters:\n *       - name: city_id\n *         description: 'get by city_id'\n *         in: path\n *         type: integer\n *         required: true\n */\nrouter.get('/:id', (req, res) => {\n  cityService\n    .getCity(req.params.id)\n    .then(data => res.json(data))\n    .catch(err => res.json(err));\n});\n\n/**\n * \n * @swagger\n * /cities/{city_id}:\n *   delete:\n *     summary: Delete city by id\n *     tags:\n *       - Cities\n *     parameters:\n *       - name: city_id\n *         description: 'city_id'\n *         in: path\n *         type: integer\n *         required: true\n */\nrouter.delete('/:id', (req, res) => {\n  cityService\n    .deleteCity(req.params.id)\n    .then(data => res.json(data))\n    .catch(err => res.json(err));\n});\n\n/**\n * \n * @swagger\n * /cities:\n *   post:\n *     summary: Add city\n *     tags:\n *       - Cities\n *     consumes:\n *       - application/json\n *     parameters:\n *       - in : body\n *         name: city\n *         description: 'Add city'\n *         required: true\n *         schema:\n *           $ref: '#/definitions/City'\n *     responses:\n *       201:\n *         description: Created\n */\nrouter.post('/', (req, res) => {\n  let country = req.body;\n  cityService\n    .addCity(country)\n    .then(data => res.json(data))\n    .catch(err => res.json(err));\n});\n\n/**\n * \n * @swagger\n * /cities:\n *   put:\n *     summary: Update city\n *     tags:\n *       - Cities\n *     consumes:\n *       - application/json\n *     parameters:\n *       - in : body\n *         name: city\n *         description: 'Update city'\n *         required: true\n *         schema:\n *           $ref: '#/definitions/CityPut'\n *     responses:\n *       201:\n *         description: Created\n */\nrouter.put('/', (req, res) => {\n  let country = req.body;\n  cityService\n    .addCity(country)\n    .then(data => res.json(data))\n    .catch(err => res.json(err));\n});\nexport default router;\n"]}