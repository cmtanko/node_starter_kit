{"version":3,"sources":["../../src/city/city.service.js"],"names":["getCityList","getCity","deleteCity","addCity","updateCity","fetchAll","columns","withRelated","country","qb","column","then","a","catch","notFound","e","id","where","fetch","city","destroy","forge","save","refresh"],"mappings":";;;;;QAGgBA,W,GAAAA,W;QAmBAC,O,GAAAA,O;QAoBAC,U,GAAAA,U;QAIAC,O,GAAAA,O;QAMAC,U,GAAAA,U;;AApDhB;;;;AACA;;;;;;AAEO,SAASJ,WAAT,GAAuB;AAC5B,SAAO,eAAKK,QAAL,CAAc;AACnBC,aAAS,CAAC,IAAD,EAAO,MAAP,EAAe,YAAf,CADU;AAEnBC,iBAAa,CACX;AACEC,eAAS,iBAASC,EAAT,EAAa;AACpBA,WAAGC,MAAH,CAAU,IAAV,EAAgB,SAAhB;AACD;AAHH,KADW;AAFM,GAAd,EAUJC,IAVI,CAUC,aAAK;AACT,WAAOC,CAAP;AACD,GAZI,EAaJC,KAbI,CAaE,aAAK;AACV,WAAO,eAAKC,QAAL,CAAcC,CAAd,CAAP;AACD,GAfI,CAAP;AAgBD;;AAEM,SAASd,OAAT,CAAiBe,EAAjB,EAAqB;AAC1B,SAAO,eAAKC,KAAL,CAAW,IAAX,EAAiBD,EAAjB,EACJE,KADI,CACE;AACLZ,aAAS,CAAC,IAAD,EAAO,MAAP,EAAe,YAAf,CADJ;AAELC,iBAAa,CACX;AACEC,eAAS,iBAASC,EAAT,EAAa;AACpBA,WAAGC,MAAH,CAAU,IAAV,EAAgB,SAAhB;AACD;AAHH,KADW;AAFR,GADF,EAWJC,IAXI,CAWC,aAAK;AACT,WAAOC,CAAP;AACD,GAbI,EAcJC,KAdI,CAcE,aAAK;AACV,WAAO,eAAKC,QAAL,CAAcC,CAAd,CAAP;AACD,GAhBI,CAAP;AAiBD;;AAEM,SAASb,UAAT,CAAoBc,EAApB,EAAwB;AAC7B,SAAO,mBAAS,EAAEA,MAAF,EAAT,EAAiBE,KAAjB,GAAyBP,IAAzB,CAA8B;AAAA,WAAQQ,KAAKC,OAAL,EAAR;AAAA,GAA9B,CAAP;AACD;;AAEM,SAASjB,OAAT,CAAiBgB,IAAjB,EAAuB;AAC5B,SAAO,eAAKE,KAAL,CAAWF,IAAX,EACJG,IADI,CACC,IADD,EAEJX,IAFI,CAEC;AAAA,WAAQQ,KAAKI,OAAL,EAAR;AAAA,GAFD,CAAP;AAGD;;AAEM,SAASnB,UAAT,CAAoBY,EAApB,EAAwBG,IAAxB,EAA8B;AACnC,SAAO,mBAAS,EAAEH,MAAF,EAAT,EAAiBM,IAAjB,CAAsBH,IAAtB,EAA4BR,IAA5B,CAAiC;AAAA,WAAQQ,KAAKI,OAAL,EAAR;AAAA,GAAjC,CAAP;AACD;;kBAEc;AACbvB,0BADa;AAEbC,kBAFa;AAGbC,wBAHa;AAIbC,kBAJa;AAKbC;AALa,C","file":"city.service.js","sourcesContent":["import City from '../models/city';\nimport Boom from 'boom';\n\nexport function getCityList() {\n  return City.fetchAll({\n    columns: ['id', 'city', 'country_id'],\n    withRelated: [\n      {\n        country: function(qb) {\n          qb.column('id', 'country');\n        },\n      },\n    ],\n  })\n    .then(a => {\n      return a;\n    })\n    .catch(e => {\n      return Boom.notFound(e);\n    });\n}\n\nexport function getCity(id) {\n  return City.where('id', id)\n    .fetch({\n      columns: ['id', 'city', 'country_id'],\n      withRelated: [\n        {\n          country: function(qb) {\n            qb.column('id', 'country');\n          },\n        },\n      ],\n    })\n    .then(a => {\n      return a;\n    })\n    .catch(e => {\n      return Boom.notFound(e);\n    });\n}\n\nexport function deleteCity(id) {\n  return new City({ id }).fetch().then(city => city.destroy());\n}\n\nexport function addCity(city) {\n  return City.forge(city)\n    .save(null)\n    .then(city => city.refresh());\n}\n\nexport function updateCity(id, city) {\n  return new City({ id }).save(city).then(city => city.refresh());\n}\n\nexport default {\n  getCityList,\n  getCity,\n  deleteCity,\n  addCity,\n  updateCity,\n};\n"]}