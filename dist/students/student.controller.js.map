{"version":3,"sources":["../../src/students/student.controller.js"],"names":["studentController","getAllStudents","req","res","query","parseInt","undefined","getStudentById","listStudents","handleError","error","send","success","message","onSuccess","result","results","getStudent","err","data","student","getStudentList","students","forEach","s","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAM;AAC9B,MAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,QAAMC,QAAQC,SAASH,IAAIE,KAAJ,CAAU,GAAV,CAAT,KAA4BE,SAA1C;AACA,QAAIF,KAAJ,EAAW;AACTG,qBAAeH,KAAf,EAAsBD,GAAtB;AACD,KAFD,MAEO;AACLK,mBAAaL,GAAb;AACD;AACF,GAPD;;AASA,SAAO;AACLF,oBAAgBA;AADX,GAAP;AAGD,CAbD;;AAeA,IAAMQ,cAAc,SAAdA,WAAc,CAACC,KAAD,EAAQP,GAAR,EAAgB;AAClC,SAAOA,IAAIQ,IAAJ,CAAS;AACdC,aAAS,KADK;AAEdC,aAAS,8BAA8BH;AAFzB,GAAT,CAAP;AAID,CALD;;AAOA,IAAMI,YAAY,SAAZA,SAAY,CAACC,MAAD,EAASZ,GAAT,EAAiB;AACjCA,MAAIQ,IAAJ,CAAS;AACPC,aAAS,IADF;AAEPI,aAASD;AAFF,GAAT;AAID,CALD;;AAOA,IAAMR,iBAAiB,SAAjBA,cAAiB,CAACH,KAAD,EAAQD,GAAR,EAAgB;AACrC,oBAAec,UAAf,CAA0Bb,KAA1B,EAAiC,UAACc,GAAD,EAAMC,IAAN,EAAe;AAC9C,QAAID,GAAJ,EAAS;AACPT,kBAAYS,GAAZ,EAAiBf,GAAjB;AACD;;AAED,QAAIiB,UAAU,sBAAYD,IAAZ,CAAd;AACAL,cAAUM,OAAV,EAAmBjB,GAAnB;AACD,GAPD;AAQD,CATD;;AAWA,IAAMK,eAAe,SAAfA,YAAe,MAAO;AAC1B,oBAAea,cAAf,CAA8B,UAACH,GAAD,EAAMC,IAAN,EAAe;AAC3C,QAAID,GAAJ,EAAS;AACPT,kBAAYS,GAAZ,EAAiBf,GAAjB;AACD;;AAED,QAAImB,WAAW,EAAf;AACAH,SAAKI,OAAL,CAAa,UAASC,CAAT,EAAY;AACvB,UAAIJ,UAAU,sBAAYI,CAAZ,CAAd;AACAF,eAASG,IAAT,CAAcL,OAAd;AACD,KAHD;;AAKAN,cAAUQ,QAAV,EAAoBnB,GAApB;AACD,GAZD;AAaD,CAdD;;kBAgBeH,iB","file":"student.controller.js","sourcesContent":["import studentService from './student.service';\nimport Student from '../models/student';\n\nconst studentController = () => {\n  const getAllStudents = (req, res) => {\n    const query = parseInt(req.query['q']) || undefined;\n    if (query) {\n      getStudentById(query, res);\n    } else {\n      listStudents(res);\n    }\n  };\n\n  return {\n    getAllStudents: getAllStudents,\n  };\n};\n\nconst handleError = (error, res) => {\n  return res.send({\n    success: false,\n    message: 'Unable to get data,Error:' + error,\n  });\n};\n\nconst onSuccess = (result, res) => {\n  res.send({\n    success: true,\n    results: result,\n  });\n};\n\nconst getStudentById = (query, res) => {\n  studentService.getStudent(query, (err, data) => {\n    if (err) {\n      handleError(err, res);\n    }\n\n    let student = new Student(data);\n    onSuccess(student, res);\n  });\n};\n\nconst listStudents = res => {\n  studentService.getStudentList((err, data) => {\n    if (err) {\n      handleError(err, res);\n    }\n\n    let students = [];\n    data.forEach(function(s) {\n      let student = new Student(s);\n      students.push(student);\n    }, this);\n\n    onSuccess(students, res);\n  });\n};\n\nexport default studentController;\n"]}